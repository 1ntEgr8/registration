schema {
  query: Query
}

# The root query type
type Query {
  # Retrieve user through a user ID or through the token passed to
  # Query. Leave id empty if you'd like to view the currently logged in
  # user.
  user(id: ID): User
  # All possible question branches
  question_branches: [String]!
  # All possible question names, or names of question in a branch
  question_names(branch: String): [String]
}

# Registration info about the user
type User {
  # User ID, valid across the entire system
  id: ID!

  # If the user has applied to the event
  applied: Boolean!
  # If the user has been accepted to the event
  accepted: Boolean!
  # If the user has been accepted and notified of his or her acceptance
  accepted_and_notified: Boolean!
  # If the user has indicated that he or she is attending
  attending: Boolean!

  # A users application phase answers
  # null if user has not filled out this phase
  application: Branch

  # A users confirmation phase answers
  # null if user has not filled out this phase
  confirmation: Branch

  # Get the answer to one of the questions asked of this user.
  # If branch is not given, find this question name in any branch.
  question(name: String!): FormItem

  # What team, if any, is the user a part of?
  team: Team
}

# A filled out form (application / confirmation form)
type Branch {
  # What type of application did the user fill out (mentor, participant, etc.)
  # when going through the form?
  type: String!
  # A key-value list of questions and answers from the confirmation application
  data: [FormItem]!
  start_time: String
  submit_time: String
}

# Application teams
type Team {
  id: ID!
}

type FormItem {
  name: String!
  type: String!
  value: String
  values: [String]
  file: String
}

