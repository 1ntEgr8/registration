schema {
  query: Query
  subscription: Subscription,
}

# The root query type, you must provide your auth token to get
# access to privileged information.
type Query {
  # The data someone can view is based on who's viewing it, this
  # is represented by this authorization gate.
  authority(token: ID!): AuthorizedQuery!
}

# The root subscription type, you must provide your auth token to get
# access to privileged information.
type Subscription {
  # The data someone can view is based on who's viewing it, this
  # is represented by this authorization gate.
  # If you don't have permissions to view the subscriptions, you will
  # get back an empty subscriptions block.
  authority(token: ID!): AuthorizedSubscription
}

# A Query that's been given an auth token.
type AuthorizedQuery {
  # Retrieve user through a user ID or through the token passed to
  # Query. Leave id empty if you'd like to view the currently logged in
  # user.
  user(id: ID): User
}

# The root subscription type, all subscribes go through here
type AuthorizedSubscription {
  # Triggered when a user is added to the registration system.
  user_added: User!
  # Triggered when a user is removed from the registration system,
  # returns their user ID
  user_removed: ID!
  # Triggered when the user with the specified ID has changed.
  # (This includes being accepted, choosing a team, or applying)
  # If a UserEvent is specified, this triggered when the user has
  # reached that event.
  user_modified(id: ID!, event: UserEvent): User!
}

# Some events that a user can go through in registration
enum UserEvent {
  # User has visited the page but has not hit 'apply'.
  CREATED
  # User has filled out the application.
  APPLIED
  # User has been accepted to the event.
  ACCEPTED
  # User has been accepted and was notified of it.
  ACCEPTED_AND_NOTIFIED
  # User indicated he or she is attending the event.
  ATTENDING
  # User has been rejected from the event.
  REJECTED
}

type User {
  # User ID, valid across the entire system
  id: ID!
  # User's email
  email: String!
  # If the user's email has been verified to be his or hers
  email_verified: Boolean!
  # If the user is an admin
  admin: Boolean!
  # The user's human-readable full name
  name: String

  # If the user has applied to the event
  applied: Boolean!
  # If the user has been accepted to the event
  accepted: Boolean!
  # If the user has been accepted and notified of his or her acceptance
  accepted_and_notified: Boolean!
  # If the user has indicated that he or she is attending
  attending: Boolean!

  # What type of application did the user fill out (mentor, participant, etc.)?
  applicationBranch: String
  # A key-value list of questions and answers from the application
  applicationData: [FormItem]
  applicationStartTime: String
  applicationSubmitTime: String

  # What type of application did the user fill out (mentor, participant, etc.)
  # when going through the confirmation steps?
  confirmationBranch: String
  # A key-value list of questions and answers from the confirmation application
  confirmationData: [FormItem]
  confirmationStartTime: String
  confirmationSubmitTime: String

  # What team, if any, is the user a part of?
  team: Team
}

# Application teams
type Team {
  id: ID!
}

type FormItem {
  name: String!
  type: String!
  value: String # TODO
}

